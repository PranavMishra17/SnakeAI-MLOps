name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'
        runVcpkgInstall: true
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.3
      with:
        vs-version: '17.0'
    
    # Create required directories BEFORE build with proper Windows handling
    - name: Create required directories
      run: |
        $dirs = @(
          "models",
          "assets/fonts", 
          "data",
          "logs"
        )
        
        foreach ($dir in $dirs) {
          if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force
            Write-Host "✅ Created directory: $dir"
          } else {
            Write-Host "📁 Directory already exists: $dir"
          }
        }
        
        # Create font placeholder if it doesn't exist
        if (-not (Test-Path "assets/fonts/arial.ttf")) {
          "Font placeholder" | Out-File -FilePath "assets/fonts/arial.ttf" -Encoding utf8
          Write-Host "✅ Created font placeholder"
        } else {
          Write-Host "📄 Font placeholder already exists"
        }
      shell: powershell
    
    - name: Configure CMake
      run: |
        cmake -B out/build/windows-default `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" `
          -DTORCH_AVAILABLE=OFF
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    
    - name: Build Release
      run: |
        cmake --build out/build/windows-default --config Release
    
    - name: Create build assets with error handling
      run: |
        $buildDirs = @(
          "out/build/windows-default/Release/assets/fonts",
          "out/build/windows-default/Release/models",
          "out/build/windows-default/Release/data", 
          "out/build/windows-default/Release/logs"
        )
        
        Write-Host "🏗️ Creating build asset directories..."
        
        foreach ($dir in $buildDirs) {
          try {
            if (-not (Test-Path $dir)) {
              New-Item -ItemType Directory -Path $dir -Force -ErrorAction Stop
              Write-Host "✅ Created: $dir"
            } else {
              Write-Host "📁 Already exists: $dir"
            }
          }
          catch {
            Write-Host "⚠️ Warning: Could not create $dir - $($_.Exception.Message)"
            # Continue with other directories
          }
        }
        
        # Create font placeholder in build directory
        $fontPath = "out/build/windows-default/Release/assets/fonts/arial.ttf"
        try {
          if (-not (Test-Path $fontPath)) {
            "Font placeholder" | Out-File -FilePath $fontPath -Encoding utf8 -ErrorAction Stop
            Write-Host "✅ Created build font placeholder"
          } else {
            Write-Host "📄 Build font placeholder already exists"
          }
        }
        catch {
          Write-Host "⚠️ Warning: Could not create font placeholder - $($_.Exception.Message)"
        }
        
        Write-Host "🎯 Build assets setup complete"
      shell: powershell
    
    - name: Test Release Build
      run: |
        $exePath = "out/build/windows-default/Release/SnakeAI-MLOps.exe"
        
        if (Test-Path $exePath) {
          Write-Host "✅ Release executable found at: $exePath"
          
          # Get file info
          $fileInfo = Get-Item $exePath
          Write-Host "📊 File size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          Write-Host "📅 Created: $($fileInfo.CreationTime)"
        } else {
          Write-Host "❌ Release executable missing at: $exePath"
          
          # Debug: List contents of build directory
          Write-Host "🔍 Debug: Contents of build directory:"
          if (Test-Path "out/build/windows-default/Release") {
            Get-ChildItem "out/build/windows-default/Release" -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          } else {
            Write-Host "❌ Release directory doesn't exist"
          }
          
          exit 1
        }
      shell: powershell
    
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SnakeAI-MLOps-Windows
        path: |
          out/build/windows-default/Release/SnakeAI-MLOps.exe
          out/build/windows-default/Release/*.dll
          out/build/windows-default/Release/assets/
          out/build/windows-default/Release/models/
        retention-days: 90

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libudev-dev \
          libfreetype6-dev \
          libopenal-dev \
          libflac-dev \
          libvorbis-dev
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'
        runVcpkgInstall: true
    
    # Create required directories BEFORE build with proper error handling
    - name: Create required directories
      run: |
        set -e  # Exit on any error
        
        dirs=(
          "models"
          "assets/fonts"
          "data" 
          "logs"
        )
        
        echo "🏗️ Creating required directories..."
        
        for dir in "${dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo "✅ Created directory: $dir"
          else
            echo "📁 Directory already exists: $dir"
          fi
        done
        
        # Create font placeholder if it doesn't exist
        if [ ! -f "assets/fonts/arial.ttf" ]; then
          echo "Font placeholder for CI" > "assets/fonts/arial.ttf"
          echo "✅ Created font placeholder"
        else
          echo "📄 Font placeholder already exists"
        fi
        
        echo "🎯 Directory setup complete"
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
          -DTORCH_AVAILABLE=OFF
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    
    - name: Build
      run: |
        cmake --build build --config Release -j$(nproc)
    
    - name: Create build assets with error handling
      run: |
        set -e  # Exit on any error
        
        build_dirs=(
          "build/assets/fonts"
          "build/models"
          "build/data"
          "build/logs"
        )
        
        echo "🏗️ Creating build asset directories..."
        
        for dir in "${build_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo "✅ Created: $dir"
          else
            echo "📁 Already exists: $dir"
          fi
        done
        
        # Create font placeholder in build directory
        if [ ! -f "build/assets/fonts/arial.ttf" ]; then
          echo "Font placeholder for CI" > "build/assets/fonts/arial.ttf"
          echo "✅ Created build font placeholder"
        else
          echo "📄 Build font placeholder already exists"
        fi
        
        echo "🎯 Build assets setup complete"
    
    - name: Test Build
      run: |
        if [ -f "build/SnakeAI-MLOps" ]; then
          echo "✅ Linux executable found"
          
          # Get file info
          ls -la "build/SnakeAI-MLOps"
          file "build/SnakeAI-MLOps"
        else
          echo "❌ Linux executable missing"
          
          # Debug: List contents of build directory
          echo "🔍 Debug: Contents of build directory:"
          find build -type f -name "*" | head -20
          
          exit 1
        fi
    
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SnakeAI-MLOps-Linux
        path: |
          build/SnakeAI-MLOps
          build/assets/
          build/models/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run clang-format check
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        echo "Checking code formatting..."
        
        # Find C++ files and check formatting
        cpp_files=$(find src/ -name "*.cpp" -o -name "*.hpp" 2>/dev/null || true)
        
        if [ -n "$cpp_files" ]; then
          echo "$cpp_files" | xargs clang-format --dry-run --Werror || {
            echo "⚠️ Code formatting issues found"
            echo "Run: find src/ -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i"
          }
        else
          echo "📄 No C++ files found to check"
        fi
    
    - name: Count lines of code
      run: |
        echo "## Code Statistics" >> $GITHUB_STEP_SUMMARY
        echo "| Language | Files | Lines |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # Count C++ files safely
        cpp_files=$(find src/ -name "*.cpp" -o -name "*.hpp" 2>/dev/null | wc -l || echo "0")
        cpp_lines=$(find src/ -name "*.cpp" -o -name "*.hpp" -exec cat {} \; 2>/dev/null | wc -l || echo "0")
        
        cmake_files=$(find . -name "CMakeLists.txt" -o -name "*.cmake" 2>/dev/null | wc -l || echo "0")
        cmake_lines=$(find . -name "CMakeLists.txt" -o -name "*.cmake" -exec cat {} \; 2>/dev/null | wc -l || echo "0")
        
        json_files=$(find . -name "*.json" 2>/dev/null | wc -l || echo "0")
        json_lines=$(find . -name "*.json" -exec cat {} \; 2>/dev/null | wc -l || echo "0")
        
        echo "| C++ | $cpp_files | $cpp_lines |" >> $GITHUB_STEP_SUMMARY
        echo "| CMake | $cmake_files | $cmake_lines |" >> $GITHUB_STEP_SUMMARY
        echo "| JSON | $json_files | $json_lines |" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: [build-linux]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create empty models directory
      run: |
        mkdir -p models
        echo "# Models directory" > models/README.md
        echo "📁 Created models directory with README"
    
    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -f docker/Dockerfile -t snakeai-mlops:latest . || {
          echo "❌ Docker build failed"
          exit 1
        }
        echo "✅ Docker image built successfully"
    
    - name: Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        docker run --rm snakeai-mlops:latest echo "Docker test successful" || {
          echo "❌ Docker test failed"
          exit 1
        }
        echo "✅ Docker image test passed"
    
    - name: Login to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Tag and Push to registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME=ghcr.io/${REPO_OWNER}/snakeai-mlops:latest
        
        echo "🏷️ Tagging image as: $IMAGE_NAME"
        docker tag snakeai-mlops:latest $IMAGE_NAME
        
        echo "📤 Pushing to registry..."
        docker push $IMAGE_NAME || {
          echo "❌ Docker push failed"
          exit 1
        }
        
        echo "✅ Successfully pushed to GitHub Container Registry"

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: SnakeAI-MLOps-Windows
        path: ./windows-release
      continue-on-error: true
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: SnakeAI-MLOps-Linux
        path: ./linux-release
      continue-on-error: true
    
    - name: Create release archives
      run: |
        echo "📦 Creating release archives..."
        
        if [ -d "windows-release" ] && [ "$(ls -A windows-release)" ]; then
          cd windows-release && zip -r ../SnakeAI-MLOps-Windows.zip . && cd ..
          echo "✅ Created Windows archive"
        else
          echo "⚠️ Windows release directory is empty or missing"
        fi
        
        if [ -d "linux-release" ] && [ "$(ls -A linux-release)" ]; then
          cd linux-release && tar -czf ../SnakeAI-MLOps-Linux.tar.gz . && cd ..
          echo "✅ Created Linux archive"
        else
          echo "⚠️ Linux release directory is empty or missing"
        fi
        
        echo "📋 Available files:"
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No archives created"
    
    - name: Generate changelog
      run: |
        echo "## SnakeAI-MLOps Release Build ${{ github.run_number }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Features" >> CHANGELOG.md
        echo "- 🎮 Multiple AI agents: Q-Learning, DQN, Policy Gradient, Actor-Critic" >> CHANGELOG.md
        echo "- 🧠 Enhanced state representation (20D neural network features)" >> CHANGELOG.md
        echo "- 📊 Real-time performance monitoring and leaderboard" >> CHANGELOG.md
        echo "- 🔄 Multiple game modes: Single Player, Agent vs Player, Agent vs System" >> CHANGELOG.md
        echo "- 🎯 Trained models with different profiles (aggressive, balanced, conservative)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Technical Details" >> CHANGELOG.md
        echo "- Built on: $(date)" >> CHANGELOG.md
        echo "- Commit: ${{ github.sha }}" >> CHANGELOG.md
        echo "- Platform: Windows (x64) + Linux (x64)" >> CHANGELOG.md
        echo "- Docker: Available at ghcr.io/${{ github.repository_owner }}/snakeai-mlops" >> CHANGELOG.md
        echo "- Note: CI builds compiled without LibTorch for compatibility" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Installation" >> CHANGELOG.md
        echo "1. Download the appropriate package for your platform" >> CHANGELOG.md
        echo "2. Extract the archive" >> CHANGELOG.md
        echo "3. Run SnakeAI-MLOps executable" >> CHANGELOG.md
        echo "4. For neural network support, build locally with LibTorch installed" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Recent Changes" >> CHANGELOG.md
        git log --oneline -10 >> CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v2.0.0-build-${{ github.run_number }}
        name: SnakeAI-MLOps v2.0.0 Build ${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          SnakeAI-MLOps-Windows.zip
          SnakeAI-MLOps-Linux.tar.gz
      continue-on-error: true