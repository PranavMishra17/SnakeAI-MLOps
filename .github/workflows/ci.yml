name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'
        runVcpkgInstall: true
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.3
      with:
        vs-version: '17.0'
    
    - name: Configure CMake
      run: |
        cmake -B out/build/windows-default `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" `
          -DTORCH_AVAILABLE=OFF
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    
    - name: Build Release
      run: |
        cmake --build out/build/windows-default --config Release
    
    - name: Create assets and models
      run: |
        mkdir -p out/build/windows-default/Release/assets/fonts
        mkdir -p out/build/windows-default/Release/models
        mkdir -p out/build/windows-default/Release/data
        mkdir -p out/build/windows-default/Release/logs
        echo "Font placeholder" > out/build/windows-default/Release/assets/fonts/arial.ttf
    
    - name: Test Release Build
      run: |
        if (Test-Path "out/build/windows-default/Release/SnakeAI-MLOps.exe") {
          Write-Host "✅ Release executable found"
        } else {
          Write-Host "❌ Release executable missing"
          exit 1
        }
      shell: powershell
    
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SnakeAI-MLOps-Windows
        path: |
          out/build/windows-default/Release/SnakeAI-MLOps.exe
          out/build/windows-default/Release/*.dll
          out/build/windows-default/Release/assets/
          out/build/windows-default/Release/models/
        retention-days: 90

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libudev-dev \
          libfreetype6-dev \
          libopenal-dev \
          libflac-dev \
          libvorbis-dev
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'
        runVcpkgInstall: true
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
          -DTORCH_AVAILABLE=OFF
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    
    - name: Build
      run: |
        cmake --build build --config Release -j$(nproc)
    
    - name: Create required directories
      run: |
        mkdir -p build/assets/fonts
        mkdir -p build/models
        mkdir -p build/data
        mkdir -p build/logs
        echo "Font placeholder for CI" > build/assets/fonts/arial.ttf
    
    - name: Test Build
      run: |
        if [ -f "build/SnakeAI-MLOps" ]; then
          echo "✅ Linux executable found"
        else
          echo "❌ Linux executable missing"
          exit 1
        fi
    
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SnakeAI-MLOps-Linux
        path: |
          build/SnakeAI-MLOps
          build/assets/
          build/models/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run clang-format check
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        echo "Checking code formatting..."
        find src/ -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror || echo "⚠️ Code formatting issues found"
    
    - name: Count lines of code
      run: |
        echo "## Code Statistics" >> $GITHUB_STEP_SUMMARY
        echo "| Language | Files | Lines |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| C++ | $(find src/ -name "*.cpp" -o -name "*.hpp" | wc -l) | $(find src/ -name "*.cpp" -o -name "*.hpp" -exec cat {} \; | wc -l) |" >> $GITHUB_STEP_SUMMARY
        echo "| CMake | $(find . -name "CMakeLists.txt" -o -name "*.cmake" | wc -l) | $(find . -name "CMakeLists.txt" -o -name "*.cmake" -exec cat {} \; | wc -l) |" >> $GITHUB_STEP_SUMMARY
        echo "| JSON | $(find . -name "*.json" | wc -l) | $(find . -name "*.json" -exec cat {} \; | wc -l) |" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: [build-linux]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create empty models directory
      run: |
        mkdir -p models
        echo "# Models directory" > models/README.md
    
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t snakeai-mlops:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm snakeai-mlops:latest echo "Docker test successful"
    
    - name: Login to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Tag and Push to registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME=ghcr.io/${REPO_OWNER}/snakeai-mlops:latest
        docker tag snakeai-mlops:latest $IMAGE_NAME
        docker push $IMAGE_NAME

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: SnakeAI-MLOps-Windows
        path: ./windows-release
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: SnakeAI-MLOps-Linux
        path: ./linux-release
    
    - name: Create release archives
      run: |
        cd windows-release && zip -r ../SnakeAI-MLOps-Windows.zip . && cd ..
        cd linux-release && tar -czf ../SnakeAI-MLOps-Linux.tar.gz . && cd ..
    
    - name: Generate changelog
      run: |
        echo "## SnakeAI-MLOps Release Build ${{ github.run_number }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Features" >> CHANGELOG.md
        echo "- 🎮 Multiple AI agents: Q-Learning, DQN, Policy Gradient, Actor-Critic" >> CHANGELOG.md
        echo "- 🧠 Enhanced state representation (20D neural network features)" >> CHANGELOG.md
        echo "- 📊 Real-time performance monitoring and leaderboard" >> CHANGELOG.md
        echo "- 🔄 Multiple game modes: Single Player, Agent vs Player, Agent vs System" >> CHANGELOG.md
        echo "- 🎯 Trained models with different profiles (aggressive, balanced, conservative)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Technical Details" >> CHANGELOG.md
        echo "- Built on: $(date)" >> CHANGELOG.md
        echo "- Commit: ${{ github.sha }}" >> CHANGELOG.md
        echo "- Platform: Windows (x64) + Linux (x64)" >> CHANGELOG.md
        echo "- Docker: Available at ghcr.io/${{ github.repository_owner }}/snakeai-mlops" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Installation" >> CHANGELOG.md
        echo "1. Download the appropriate package for your platform" >> CHANGELOG.md
        echo "2. Extract the archive" >> CHANGELOG.md
        echo "3. Run SnakeAI-MLOps executable" >> CHANGELOG.md
        echo "4. Enjoy watching AI agents play Snake!" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Recent Changes" >> CHANGELOG.md
        git log --oneline -10 >> CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v2.0.0-build-${{ github.run_number }}
        name: SnakeAI-MLOps v2.0.0 Build ${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          SnakeAI-MLOps-Windows.zip
          SnakeAI-MLOps-Linux.tar.gz